<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sapphire Blog</title>
  
  <subtitle>Personal hack notes by Sapphire</subtitle>
  <link href="https://sapphirelin.github.io/atom.xml" rel="self"/>
  
  <link href="https://sapphirelin.github.io/"/>
  <updated>2021-07-21T10:50:10.123Z</updated>
  <id>https://sapphirelin.github.io/</id>
  
  <author>
    <name>Sapphire</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TKC 使用不同 Harbor 憑證方式 | 私倉(harbor)的權限隔離</title>
    <link href="https://sapphirelin.github.io/20210719-TKC-%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C-Harbor-%E6%86%91%E8%AD%89%E6%96%B9%E5%BC%8F-%E7%A7%81%E5%80%89-harbor-%E7%9A%84%E6%AC%8A%E9%99%90%E9%9A%94%E9%9B%A2/"/>
    <id>https://sapphirelin.github.io/20210719-TKC-%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C-Harbor-%E6%86%91%E8%AD%89%E6%96%B9%E5%BC%8F-%E7%A7%81%E5%80%89-harbor-%E7%9A%84%E6%AC%8A%E9%99%90%E9%9A%94%E9%9B%A2/</id>
    <published>2021-07-19T11:12:11.000Z</published>
    <updated>2021-07-21T10:50:10.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vSphere-with-Tanzu-TKC-使用不同-Harbor-憑證做到權限隔離"><a href="#vSphere-with-Tanzu-TKC-使用不同-Harbor-憑證做到權限隔離" class="headerlink" title="vSphere with Tanzu TKC 使用不同 Harbor 憑證做到權限隔離"></a>vSphere with Tanzu TKC 使用不同 Harbor 憑證做到權限隔離</h2><p>以剛邁入微服務化階段的企業來說，在一組SDDC共用一台私倉的狀況是非常方便上手又好管理的。在 VMware Tanzu 平台，若裝在VCF上，有了NSX的幫助，不用個別安裝，點選就能啟用 Harbor，並且是以 namespace 來進行隔離的大權限控管私倉。</p><blockquote><p>參考閱讀：<br><a href="https://docs.vmware.com/tw/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-AE24CF79-3C74-4CCD-B7C7-757AD082D86A.html">一鍵啟用 Embedded Harbor (可切換語系為中文)</a><br>整座雲通用憑證的放法 <a href="/20210718-Tanzu-%E9%8F%A1%E5%83%8F%E5%80%89%E5%BA%AB%E6%86%91%E8%AD%89%E5%AE%89%E8%A3%9D%E6%B3%95/">vSphere 7 embedded or external Harbor 憑證安裝法</a></p></blockquote><p>不過一定有已經個別團隊在應用微服務的企業，因應這幾年都要集中化管理、整合資源（斷捨離～）<br>原本各個 team 都在維護自己的 K8s ，現在要搬上來一個大平台統一由SRE 管理，每個組織各自的 Harbor ，或者說本來就在政策上就要規範某個R&amp;D team 只能連上單獨的私倉（權限控管）</p><p>這時候透過 Tanzu 容器雲平台就很能簡單實現啦～</p><h3 id="新建cluster"><a href="#新建cluster" class="headerlink" title="/ 新建cluster /"></a>/ 新建cluster /</h3><p>在為該 team 創建 guest cluster 的時候加上 additionalTrustedCAs 就行囉！</p><p>部署的 yaml 檔案，看第20~23行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">run.tanzu.vmware.com/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TanzuKubernetesCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tkc-1</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">distribution:</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.18.5</span></span><br><span class="line">  <span class="attr">settings:</span></span><br><span class="line">    <span class="attr">network:</span></span><br><span class="line">      <span class="attr">cni:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">antrea</span></span><br><span class="line">      <span class="attr">pods:</span></span><br><span class="line">        <span class="attr">cidrBlocks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">193.1</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">      <span class="attr">serviceDomain:</span> <span class="string">shared.vsphere.local</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="attr">cidrBlocks:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">195.128</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line">      <span class="attr">trust:</span></span><br><span class="line">        <span class="attr">additionalTrustedCAs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">data:</span> <span class="string">$&#123;透過base64加密的憑證&#125;</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">$&#123;憑證名稱&#125;</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>範例：<br><img src="https://i.imgur.com/gUMV6EE.png" alt="TanzuKubernetesCluster yaml"></p><p>登入到那台TKC control plane node 後，進去 <code>/etc/ssl/certs/</code> 就會發現有 rootca 檔案啦！<br><img src="https://i.imgur.com/hcKzcvg.png"></p><p>各個環境不同，如果在一台k8s node 有多租戶問題，記得丟到 <code>/usr/share/ca-certificates/</code><br>或參考我筆記的<a href="https://hackmd.io/anmhz4W8SuqIhApEnHiGww">各OS放憑證的方法及路徑</a></p><h3 id="既有cluster"><a href="#既有cluster" class="headerlink" title="/ 既有cluster /"></a>/ 既有cluster /</h3><p>我之前是一個一個塞啦，沒錯，一台一台登進去copy paste … (´Ａ｀;)<br>感謝夥伴分享我 <a href="https://gist.githubusercontent.com/shawnho1018/9fd2282b747cc1129f37ac74f79645a0/raw/b014d242051b54a99584e8fb83d42c39e12ee43c/guest-cluster-trust-harbor.sh">Shawn Ho 大大寫的 Script</a> ，跑一個 for 迴圈執行，簡簡單單：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ips=$(kubectl get virtualmachines -n demo -o json | grep &quot;vmIp&quot;  | awk -F &#x27;:&#x27; &#x27;&#123;print $2&#125;&#x27; | sed &#x27;s/&quot;//g&#x27;)</span><br><span class="line"></span><br><span class="line">for i in $&#123;ips&#125;; do</span><br><span class="line">  scp -i tkc-1-ssh-key harbor.crt vmware-system-user@$&#123;i&#125;:/home/vmware-system-user/harbor.crt</span><br><span class="line">  ssh -i tkc-1-ssh-key vmware-system-user@$&#123;i&#125; &quot;sudo mkdir -p /etc/docker/certs.d/172.18.30.80; sudo mv ~/harbor.crt /etc/docker/certs.d/172.18.30.80/ca.crt&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>上述我的 ${namespace} = demo, ${gcname} = tkc-1, ${harborip}=172.18.30.80，記得變數要改成自己的環境。也歡迎大家參閱Shawn 大的原文：  <a href="https://medium.com/%E8%BC%95%E9%AC%86%E5%B0%8F%E5%93%81-pks%E8%88%87k8s%E7%9A%84%E9%BB%9E%E6%BB%B4/vsphere7%E7%9A%84harbor%E8%B3%87%E6%BA%90-%E5%9F%BA%E7%A4%8E%E4%BD%BF%E7%94%A8%E7%AF%87-ea4ce622c93f#6ea4">vSphere7的Harbor資源 — 基礎使用篇</a></p><hr><p>以上分享新建或是匯入已存在的cluster 串接憑證的方式，讓我們安安全全的pull push image到私倉，專注在開發上吧～</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vSphere-with-Tanzu-TKC-使用不同-Harbor-憑證做到權限隔離&quot;&gt;&lt;a href=&quot;#vSphere-with-Tanzu-TKC-使用不同-Harbor-憑證做到權限隔離&quot; class=&quot;headerlink&quot; title=&quot;vSpher</summary>
      
    
    
    
    <category term="work hack" scheme="https://sapphirelin.github.io/categories/work-hack/"/>
    
    <category term="那根樹枝 Tanzu" scheme="https://sapphirelin.github.io/categories/work-hack/%E9%82%A3%E6%A0%B9%E6%A8%B9%E6%9E%9D-Tanzu/"/>
    
    
    <category term="VMware" scheme="https://sapphirelin.github.io/tags/VMware/"/>
    
    <category term="Tanzu" scheme="https://sapphirelin.github.io/tags/Tanzu/"/>
    
    <category term="harbor" scheme="https://sapphirelin.github.io/tags/harbor/"/>
    
    <category term="repository" scheme="https://sapphirelin.github.io/tags/repository/"/>
    
    <category term="cert" scheme="https://sapphirelin.github.io/tags/cert/"/>
    
    <category term="vSphere with Tanzu" scheme="https://sapphirelin.github.io/tags/vSphere-with-Tanzu/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 常用指令</title>
    <link href="https://sapphirelin.github.io/20210718-Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-Hexo-%E7%B6%B2%E7%AB%99%E7%A7%98%E7%AC%88/"/>
    <id>https://sapphirelin.github.io/20210718-Hexo-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-Hexo-%E7%B6%B2%E7%AB%99%E7%A7%98%E7%AC%88/</id>
    <published>2021-07-18T09:21:24.000Z</published>
    <updated>2021-07-18T13:06:15.264Z</updated>
    
    <content type="html"><![CDATA[<p>個人筆記。</p><p>Here’s my personal cheat sheet</p><h3 id="hexo"><a href="#hexo" class="headerlink" title="/ hexo /"></a>/ hexo /</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   # cleans the cache file (db.json)</span><br><span class="line">hexo g       # generate static files</span><br><span class="line">hexo s       # starts a local server</span><br><span class="line">hexo d       # deploy to github</span><br><span class="line">hexo g -d    # deploy after generation finishes</span><br><span class="line"></span><br><span class="line">hexo new &lt;post-title&gt;       # create new post</span><br><span class="line">hexo new page &lt;page-title&gt;  # create new page</span><br></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="/ post /"></a>/ <a href="https://butterfly.js.org/posts/dc584b87/">post</a> /</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg https://xxx.png 150px %&#125;</span><br><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><h3 id="page"><a href="#page" class="headerlink" title="/ page /"></a>/ page /</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一個Tab --&gt;</span><br><span class="line">**tab名字為第一個Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有圖標 沒有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸彈@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle 標題 %&#125;</span><br><span class="line">內容內容</span><br><span class="line">內容內容內容內容</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><h3 id="plugins"><a href="#plugins" class="headerlink" title="/ plugins /"></a>/ plugins /</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% owl giphy XmiTYLQ5qXTqM %&#125;</span><br><span class="line">&#123;% owl local img/img.jpg %&#125;</span><br><span class="line">&#123;% owl local another-img.gif %&#125;</span><br><span class="line">&#123;% owl youtube YtuAOT_c2EA %&#125;</span><br><span class="line">&#123;% owl niconico sm1494658 %&#125;</span><br><span class="line">&#123;% owl niconico sm1494658 watch %&#125;</span><br><span class="line">&#123;% owl bilibili av247371 %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;個人筆記。&lt;/p&gt;
&lt;p&gt;Here’s my personal cheat sheet&lt;/p&gt;
&lt;h3 id=&quot;hexo&quot;&gt;&lt;a href=&quot;#hexo&quot; class=&quot;headerlink&quot; title=&quot;/ hexo /&quot;&gt;&lt;/a&gt;/ hexo /&lt;/h3&gt;&lt;figur</summary>
      
    
    
    
    <category term="life hack" scheme="https://sapphirelin.github.io/categories/life-hack/"/>
    
    <category term="架站紀錄" scheme="https://sapphirelin.github.io/categories/life-hack/%E6%9E%B6%E7%AB%99%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="hexo" scheme="https://sapphirelin.github.io/tags/hexo/"/>
    
    <category term="personal website" scheme="https://sapphirelin.github.io/tags/personal-website/"/>
    
  </entry>
  
  <entry>
    <title>從零開始 10分鐘建好 github + hexo 個人網站</title>
    <link href="https://sapphirelin.github.io/20210717-%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-10%E5%88%86%E9%90%98%E5%BB%BA%E5%A5%BD-github-hexo-%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99/"/>
    <id>https://sapphirelin.github.io/20210717-%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-10%E5%88%86%E9%90%98%E5%BB%BA%E5%A5%BD-github-hexo-%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99/</id>
    <published>2021-07-17T14:28:44.000Z</published>
    <updated>2021-07-18T09:23:41.948Z</updated>
    
    <content type="html"><![CDATA[<p>太漂亮也太神奇了啦啊啊啊啊!!!!<br>真的是超方便並且超快速就能建好的網站呢!!!<br><del>仔細想想是平常有更複雜的文件讓我看，被迫飆速練等</del><br>那就讓我來速速傳授建置秘笈， let’s go~</p><div class="owl-media owl-image owl-giphy"><img src="https://media.giphy.com/media/XmiTYLQ5qXTqM/giphy.gif"></div><h2 id="本機環境準備"><a href="#本機環境準備" class="headerlink" title="/ 本機環境準備 /"></a>/ 本機環境準備 /</h2><ol><li><p>安裝 <a href="https://nodejs.org/en/">Node.js</a> ，選LTS版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This package has installed:</span><br><span class="line">    •    Node.js v14.17.3 to /usr/local/bin/node</span><br><span class="line">    •    npm v6.14.13 to /usr/local/bin/npm</span><br><span class="line">Make sure that /usr/local/bin is in your $PATH.</span><br></pre></td></tr></table></figure><blockquote><p>若環境有多個Nodejs，到<a href="https://hsiangfeng.github.io/nodejs/20200124/3404456418/">這邊</a>參考裝nvm 控管</p></blockquote></li><li><p>安裝 <a href="http://git-scm.com/downloads">Git</a> ，Xcode 內建了所以我沒裝<br>使用方式可以參考： <a href="https://www.appcoda.com.tw/git-xcode/">程式碼時光機：應用 Git 版本控制，即使犯錯也不怕</a></p></li><li><p>Xcode 連接 GitHub 帳號<br>串接參考： <a href="https://medium.com/%E5%BD%BC%E5%BE%97%E6%BD%98%E7%9A%84-swift-ios-app-%E9%96%8B%E7%99%BC%E6%95%99%E5%AE%A4/xcode%E5%BB%BA%E7%AB%8Bgithub%E5%B8%B3%E8%99%9F-26e0da5d8b92">Use git in Xcode. Xcode建立GitHub帳號</a><br>輸入下列指令檢查有沒有出現版本號</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br><span class="line">$ git --version</span><br></pre></td></tr></table></figure></li><li><p> 打開Terminal，修改 npm 預設路徑</p></li><li><p>1 參考 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">這份文件</a> 的步驟2~3後下這個指令：<code>vi ~/.profile</code></p></li><li><p>2 進入編輯模式後貼上步驟4的指令</p></li><li><p>3 從編輯模式跳出來 (esc &gt; 輸入wq)，再輸入步驟5，結束。</p></li></ol><ol start="5"><li>創建一個空資料夾，像我命名為 <code>blog</code>，待後續使用。</li></ol><h2 id="Hexo-裝在本機"><a href="#Hexo-裝在本機" class="headerlink" title="/ Hexo 裝在本機 /"></a>/ Hexo 裝在本機 /</h2><ol><li>開始安裝，參考<a href="https://hexo.io/zh-tw/docs/index.html">hexo</a> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure></li><li>接著讓 hexo 安裝檔案到你的空資料夾<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;資料夾名稱&gt;</span><br><span class="line">$ cd &lt;資料夾名稱&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li>現在資料夾就出現東西了，輸入以下指令測試<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li><li>開瀏覽器，到 <a href="http://localhost:4000/">http://localhost:4000</a> 發現有出現東西，完成。</li></ol><p><img src="https://i.imgur.com/Zy7gM6J.jpg"></p><h2 id="串接到GitHub"><a href="#串接到GitHub" class="headerlink" title="/ 串接到GitHub /"></a>/ 串接到GitHub /</h2><ol><li>回到 blog 資料夾<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>建立金鑰，要用你github登入的 email<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;電子郵件地址&quot;</span><br></pre></td></tr></table></figure></li><li>檢視金鑰匙，複製貼到 <a href="https://github.com/settings/keys">Github SSH keys</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure></li><li>測試連線到 <a href="mailto:&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#x63;&#x6f;&#109;</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li>出現 <code>Hi sapphirelin! You&#39;ve successfully authenticated...</code> 表示完成。</li></ol><h2 id="發佈網站到全世界"><a href="#發佈網站到全世界" class="headerlink" title="/ 發佈網站到全世界 /"></a>/ 發佈網站到全世界 /</h2><ol><li><p>修改 <code>_config.yml</code> 檔案兩個地方，<code>&lt;username&gt;</code> 是你的 github 帳號：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;username&gt;.github.io</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>回到 Terminal 下指令</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><ol start="3"><li>到你的 https://<username>.github.io 看看吧！完成囉</li></ol><p>我後來整個網站上線總共大約花了8小時吧，但主要都在找主題跟美化網站~~~ 一天不到就能上線自己的個人網站真的是要大大讚嘆這個框架呀!!!!</p><hr><p><img src="https://i.imgur.com/IEThr8J.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;太漂亮也太神奇了啦啊啊啊啊!!!!&lt;br&gt;真的是超方便並且超快速就能建好的網站呢!!!&lt;br&gt;&lt;del&gt;仔細想想是平常有更複雜的文件讓我看，被迫飆速練等&lt;/del&gt;&lt;br&gt;那就讓我來速速傳授建置秘笈， let’s go~&lt;/p&gt;
&lt;div class=&quot;owl-media </summary>
      
    
    
    
    <category term="life hack" scheme="https://sapphirelin.github.io/categories/life-hack/"/>
    
    <category term="架站紀錄" scheme="https://sapphirelin.github.io/categories/life-hack/%E6%9E%B6%E7%AB%99%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="hexo" scheme="https://sapphirelin.github.io/tags/hexo/"/>
    
    <category term="personal website" scheme="https://sapphirelin.github.io/tags/personal-website/"/>
    
    <category term="快速建站" scheme="https://sapphirelin.github.io/tags/%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>正式搬家</title>
    <link href="https://sapphirelin.github.io/20210717-%E6%AD%A3%E5%BC%8F%E6%90%AC%E5%AE%B6/"/>
    <id>https://sapphirelin.github.io/20210717-%E6%AD%A3%E5%BC%8F%E6%90%AC%E5%AE%B6/</id>
    <published>2021-07-17T12:21:10.000Z</published>
    <updated>2021-07-17T17:07:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>brand new sapphirelin.github.io !!</p><div class="owl-media owl-image owl-giphy"><img src="https://media.giphy.com/media/l0HUk3XWstjKCnvuo/giphy.gif"></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;brand new sapphirelin.github.io !!&lt;/p&gt;
&lt;div class=&quot;owl-media owl-image owl-giphy&quot;&gt;&lt;img src=&quot;https://media.giphy.com/media/l0HUk3XWstjKCnv</summary>
      
    
    
    
    <category term="life hack" scheme="https://sapphirelin.github.io/categories/life-hack/"/>
    
    <category term="架站紀錄" scheme="https://sapphirelin.github.io/categories/life-hack/%E6%9E%B6%E7%AB%99%E7%B4%80%E9%8C%84/"/>
    
    
    <category term="狡兔三窟" scheme="https://sapphirelin.github.io/tags/%E7%8B%A1%E5%85%94%E4%B8%89%E7%AA%9F/"/>
    
  </entry>
  
  <entry>
    <title>Tanzu 鏡像倉庫憑證安裝法</title>
    <link href="https://sapphirelin.github.io/20210716-Tanzu-%E9%8F%A1%E5%83%8F%E5%80%89%E5%BA%AB%E6%86%91%E8%AD%89%E5%AE%89%E8%A3%9D%E6%B3%95/"/>
    <id>https://sapphirelin.github.io/20210716-Tanzu-%E9%8F%A1%E5%83%8F%E5%80%89%E5%BA%AB%E6%86%91%E8%AD%89%E5%AE%89%E8%A3%9D%E6%B3%95/</id>
    <published>2021-07-16T11:12:11.000Z</published>
    <updated>2021-07-21T10:50:14.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vSphere-with-Tanzu-使用-embedded-or-external-Harbor-方式"><a href="#vSphere-with-Tanzu-使用-embedded-or-external-Harbor-方式" class="headerlink" title="vSphere with Tanzu 使用 embedded or external Harbor 方式"></a>vSphere with Tanzu 使用 embedded or external Harbor 方式</h2><p>已經開始玩 Tanzu 一陣子的朋朋們，應該一直都有一個糾結是，embedded Harbor (內嵌式私倉) 一鍵啟用、很方便，但是不能隨意新增專案，只能跟著 namespace 創建、彈性不高；external Harbor (外接式私倉) 就能隨心所欲，但是就要把憑證一個一個丟進去每一台 cluster node 才行。</p><p>整理一下原本的步驟：</p><blockquote><ol><li>登進去SC 拿 secret 來 SSH 進去 TKG nodes （<a href="/20210713-%E6%9C%80%E9%80%9F%E7%99%BB%E5%85%A5Tanzu-guest-cluster-node-%E6%96%B9%E6%B3%95-%E9%80%B2%E5%8E%BB-TKC-%E7%AF%80%E9%BB%9E/">最速登入 guest cluster node 方法</a>）</li><li>拿 TKG cluster 的 kubeconfig 檔案</li><li>vsphere login 進去 TKC</li><li>拿到每個 TKG nodes 的 ip</li><li>丟憑證到每一個 TKG nodes 然後還要複製到每一台的憑證路徑</li><li>每一台重開 docker ..^^</li></ol></blockquote><p>別擔心，在 vSphere with Tanzu 7 U2 之後，可以透過客製化 Supervisor Cluster (SC) 的 <code>TkgServiceConfiguration</code> 這隻服務，讓塞憑證達到讓自動化：</p><hr><h3 id="準備憑證"><a href="#準備憑證" class="headerlink" title="/ 準備憑證 /"></a>/ 準備憑證 /</h3><p>兩種方法 openssl or Harbor 本身的 UI 。</p><h4 id="第一種－用-openSSL-："><a href="#第一種－用-openSSL-：" class="headerlink" title="第一種－用 openSSL ："></a>第一種－用 openSSL ：</h4><ol><li><p>先去連我們的私倉 Harbor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openssl s_client -connect &lt;harbor url&gt;:443 </span><br></pre></td></tr></table></figure></li><li><p>複製憑證區<br><img src="https://i.imgur.com/nB4a8e5.png"></p></li><li><p>下 <code>echo &#39;貼上上面複製的憑證&#39; | base64 </code> 如：<br><img src="https://i.imgur.com/E8vPHMY.png"></p></li><li><p>拿到囉！Harbor 私倉的憑證（下面反白的那段）：<br><img src="https://i.imgur.com/FePrQxG.jpg"></p></li></ol><h3 id="第二種－-到-harbor-UI-："><a href="#第二種－-到-harbor-UI-：" class="headerlink" title="第二種－ 到 harbor UI ："></a>第二種－ 到 harbor UI ：</h3><p>到  project 裡面下載 (如圖)：<br><img src="https://i.imgur.com/O6osaYD.png"><br>打開檔案一樣後用上面第3步的 base64 加密就行～</p><hr><h3 id="開始"><a href="#開始" class="headerlink" title="/ 開始 /"></a>/ 開始 /</h3><h4 id="1-登入-Supervisor-Cluster-SC"><a href="#1-登入-Supervisor-Cluster-SC" class="headerlink" title="1. 登入 Supervisor Cluster (SC)"></a>1. 登入 Supervisor Cluster (SC)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl-vsphere login --vsphere-username user@domain.com --server=xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><h4 id="2-修改-TkgServiceConfiguration"><a href="#2-修改-TkgServiceConfiguration" class="headerlink" title="2. 修改 TkgServiceConfiguration"></a>2. 修改 <code>TkgServiceConfiguration</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl edit TkgServiceConfiguration</span><br></pre></td></tr></table></figure><p>找不到的話就表示你進錯 context 囉！要去SC~</p><h4 id="3-進編輯模式後，加入憑證"><a href="#3-進編輯模式後，加入憑證" class="headerlink" title="3. 進編輯模式後，加入憑證"></a>3. 進編輯模式後，加入憑證</h4><p>原本的模樣：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">run.tanzu.vmware.com/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TkgServiceConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubectl.kubernetes.io/last-applied-configuration:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      &#123;&quot;apiVersion&quot;:&quot;run.tanzu.vmware.com/v1alpha1&quot;,&quot;kind&quot;:&quot;TkgServiceConfiguration&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;tkg-service-configuration&quot;&#125;,&quot;spec&quot;:&#123;&quot;defaultCNI&quot;:&quot;antrea&quot;&#125;&#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2021-07-01T16:30:35Z&quot;</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tkg-service-configuration</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;2948&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/run.tanzu.vmware.com/v1alpha1/tkgserviceconfigurations/tkg-service-configuration</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">f01e03b4-6c6b-4e76-9c82-a2cf4d5f2b05</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">defaultCNI:</span> <span class="string">antrea</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/I9WwqZL.png"></p><p>新增憑證後的模樣（15~18行）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">run.tanzu.vmware.com/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TkgServiceConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubectl.kubernetes.io/last-applied-configuration:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      &#123;&quot;apiVersion&quot;:&quot;run.tanzu.vmware.com/v1alpha1&quot;,&quot;kind&quot;:&quot;TkgServiceConfiguration&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;tkg-service-configuration&quot;&#125;,&quot;spec&quot;:&#123;&quot;defaultCNI&quot;:&quot;antrea&quot;&#125;&#125;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2021-07-01T16:30:35Z&quot;</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tkg-service-configuration</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;2948&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/run.tanzu.vmware.com/v1alpha1/tkgserviceconfigurations/tkg-service-configuration</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">f01e03b4-6c6b-4e76-9c82-a2cf4d5f2b05</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">defaultCNI:</span> <span class="string">antrea</span></span><br><span class="line">  <span class="attr">trust:</span></span><br><span class="line">    <span class="attr">additionalTrustedCAs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">harbor</span></span><br><span class="line">        <span class="attr">data:</span> <span class="string">貼上加密憑證</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Qb8TrXd.jpg"></p><h4 id="4-結束啦！驗證成功與否"><a href="#4-結束啦！驗證成功與否" class="headerlink" title="4. 結束啦！驗證成功與否"></a>4. 結束啦！驗證成功與否</h4><p>等待他更新後，用 <a href="/20210713-%E6%9C%80%E9%80%9F%E7%99%BB%E5%85%A5Tanzu-guest-cluster-node-%E6%96%B9%E6%B3%95-%E9%80%B2%E5%8E%BB-TKC-%E7%AF%80%E9%BB%9E/">SSH去看既有的 tkc </a> 那幾台<code>/etc/ssl/certs/</code> 目錄下面有沒有「<code>tkg-harbor.pem</code> 」。<br>或是登入你的 harbor ，直接部署你有的 image 看看有沒有成功部署：<br><img src="https://i.imgur.com/5d4jQAs.png"></p><p>｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡</p><p>當然同樣的也可以用這種方式塞內嵌式Harbor。<br>以上就是讓整座 vSphere with Tanzu 都連到私倉的方式啦！</p><p>想看影片操作的可以參考 Kendrick 哥的示範：  <a href="https://www.youtube.com/watch?v=sqC9bP8gwQ0">Set Up a Harbor Registry with Self-Signed Certificates for Tanzu Kubernetes Clusters</a></p><hr><h3 id="常見-troubleshooting"><a href="#常見-troubleshooting" class="headerlink" title="/ 常見 troubleshooting /"></a>/ 常見 troubleshooting /</h3><h4 id="－查看-pod-status"><a href="#－查看-pod-status" class="headerlink" title="－查看 pod status"></a>－查看 pod status</h4><p>分享一個簡單的除錯方式，部署後用 <code>kubectl get pod</code> 來進行檢查：</p><h5 id="1-若-Status-為-ErrImagePull"><a href="#1-若-Status-為-ErrImagePull" class="headerlink" title="1. 若 Status 為 ErrImagePull"></a>1. 若 Status 為 ErrImagePull</h5><p>併發症狀是” x509: certificate signed by unknown authority “，這就表示你憑證放錯或是沒有放進去，通常都是忘記 base64 加解密造成的，重新塞在 <code>TkgServiceConfiguration</code> 然後等待rolling update就好。</p><h5 id="2-若-Status-為-ImagePullBackOff"><a href="#2-若-Status-為-ImagePullBackOff" class="headerlink" title="2. 若 Status 為 ImagePullBackOff"></a>2. 若 Status 為 ImagePullBackOff</h5><p>這基本上就是表示連得到，憑證也沒錯，但 authorization 出錯。<br>遇到這種 error 就是檢查 secret 有沒有塞錯，或是注意 docker login 要出現 login success ，以及像是用 docker Desktop UI 有沒打錯帳號密碼。</p><p>這部分感謝 Cormac Hogan 大大分享，溫馨無比 ( ´•̥̥̥ω•̥̥̥` )</p><h4 id="－升級-vSphere-7U2-前作法-非production作法"><a href="#－升級-vSphere-7U2-前作法-非production作法" class="headerlink" title="－升級 vSphere 7U2 前作法 *非production作法"></a>－升級 vSphere 7U2 前作法 *非production作法</h4><p>還沒升級至 vSphere 7U2 之前的環境，可以參考 Cormac 的文章塞憑證：  <a href="https://cormachogan.com/2020/06/23/integrating-embedded-vsphere-with-kubernetes-harbor-registry-with-tkg-guest-clusters/">Integrating embedded vSphere with Kubernetes Harbor Registry with TKG (guest) clusters</a><br>（＊TKG guest cluster = vSphere with Tanzu’s TKC）</p><p>不過只有用本文的 TkgServiceConfiguration 自動化方式才能開 support ticket 除錯，所以不建議在生產環境使用!!<br>（上述為本文時間點狀態，以官網設置手冊為準）<br>官網文檔： <a href="https://docs.vmware.com/en/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-376FCCD1-7743-4202-ACCA-56F214B6892F.html">Using Container Registry with Tanzu Kubernetes Clusters</a></p><hr><p>接著可能會遇到的延伸問題：我司需要個別組織有其專屬的 Harbor ，例如只能給某個R&amp;D team 連上單獨的私倉的話怎麼辦？可以參考我另外一篇文章：<br><a href="https://hackmd.io/rUYyBYuKT6WRGc76gUtzUw">Tanzu k8s cluster 個別使用多個 Harbor 方式</a></p><p>至於自己的組織到底適合用 embedded or external Harbor 呢？ it depends. 有預算的話推薦直接接洽 <a href="https://www.vmware.com/tw/professional-services.html">專業服務團隊</a> ，從環境健康檢查到組織需求訪談、從 infra 到 ap 及文化和使用習慣，由架構師幫公司設計最符合企業的模式是最理想的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vSphere-with-Tanzu-使用-embedded-or-external-Harbor-方式&quot;&gt;&lt;a href=&quot;#vSphere-with-Tanzu-使用-embedded-or-external-Harbor-方式&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="work hack" scheme="https://sapphirelin.github.io/categories/work-hack/"/>
    
    <category term="那根樹枝 Tanzu" scheme="https://sapphirelin.github.io/categories/work-hack/%E9%82%A3%E6%A0%B9%E6%A8%B9%E6%9E%9D-Tanzu/"/>
    
    
    <category term="VMware" scheme="https://sapphirelin.github.io/tags/VMware/"/>
    
    <category term="Tanzu" scheme="https://sapphirelin.github.io/tags/Tanzu/"/>
    
    <category term="harbor" scheme="https://sapphirelin.github.io/tags/harbor/"/>
    
    <category term="repository" scheme="https://sapphirelin.github.io/tags/repository/"/>
    
    <category term="cert" scheme="https://sapphirelin.github.io/tags/cert/"/>
    
    <category term="vSphere with Tanzu" scheme="https://sapphirelin.github.io/tags/vSphere-with-Tanzu/"/>
    
  </entry>
  
  <entry>
    <title>最速登入Tanzu guest cluster node 方法 | 進去 TKC 節點</title>
    <link href="https://sapphirelin.github.io/20210713-%E6%9C%80%E9%80%9F%E7%99%BB%E5%85%A5Tanzu-guest-cluster-node-%E6%96%B9%E6%B3%95-%E9%80%B2%E5%8E%BB-TKC-%E7%AF%80%E9%BB%9E/"/>
    <id>https://sapphirelin.github.io/20210713-%E6%9C%80%E9%80%9F%E7%99%BB%E5%85%A5Tanzu-guest-cluster-node-%E6%96%B9%E6%B3%95-%E9%80%B2%E5%8E%BB-TKC-%E7%AF%80%E9%BB%9E/</id>
    <published>2021-07-12T16:00:00.000Z</published>
    <updated>2021-07-21T10:49:22.896Z</updated>
    
    <content type="html"><![CDATA[<h4 id="先來點開胃菜，名詞解釋："><a href="#先來點開胃菜，名詞解釋：" class="headerlink" title="先來點開胃菜，名詞解釋："></a>先來點開胃菜，名詞解釋：</h4><blockquote><h5 id="vSphere-with-Tanzu-aka-Tanzu-Kubernetes-Grid-Service-aka-TKGS"><a href="#vSphere-with-Tanzu-aka-Tanzu-Kubernetes-Grid-Service-aka-TKGS" class="headerlink" title="vSphere-with-Tanzu aka Tanzu-Kubernetes-Grid-Service aka TKGS"></a>vSphere-with-Tanzu aka Tanzu-Kubernetes-Grid-Service aka TKGS</h5><h5 id="TKG-cluster-aka-Guest-cluster-aka-Tanzu-Kubernetes-Cluster-aka-TKC"><a href="#TKG-cluster-aka-Guest-cluster-aka-Tanzu-Kubernetes-Cluster-aka-TKC" class="headerlink" title="TKG-cluster aka Guest-cluster aka Tanzu-Kubernetes-Cluster aka TKC"></a>TKG-cluster aka Guest-cluster aka Tanzu-Kubernetes-Cluster aka TKC</h5><h5 id="本篇是-TKGS’s-TKC-那幾台-VM-的進入方法"><a href="#本篇是-TKGS’s-TKC-那幾台-VM-的進入方法" class="headerlink" title="本篇是 TKGS’s TKC 那幾台 VM 的進入方法"></a>本篇是 TKGS’s TKC 那幾台 VM 的進入方法</h5></blockquote><p>最近有的POC 案子在帶 partner 的時候才發現，原來官網文件寫的落落長：<br><a href="https://docs.vmware.com/tw/VMware-vSphere/7.0/vmware-vsphere-with-tanzu/GUID-37DC1DF2-119B-4E9E-8CA6-C194F39DDEDA.html">SSH to Tanzu Kubernetes Cluster Nodes as the System User Using a Password</a></p><p>現在的時代講求效率！ 追求 agile！<br>以下無私分享我的懶人筆記，讓新手也能駕馭，簡單登進去 k8s 節點：</p><h3 id="1-登入Supervisor-Cluster"><a href="#1-登入Supervisor-Cluster" class="headerlink" title="1. 登入Supervisor Cluster"></a>1. 登入Supervisor Cluster</h3><p>server &amp; username 記得改成自己的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl-vsphere login --vsphere-username administrator@vsphere.local --server=172.18.31.1 --insecure-skip-tls-verify</span><br></pre></td></tr></table></figure><p>登入進去 SC 後我們就跟gc相聯繫了～</p><h3 id="2-切換到你的-Cluster"><a href="#2-切換到你的-Cluster" class="headerlink" title="2. 切換到你的 Cluster"></a>2. 切換到你的 Cluster</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl config use-context CLUSTER-NAME</span><br></pre></td></tr></table></figure><h3 id="3-取得系統管理員密碼"><a href="#3-取得系統管理員密碼" class="headerlink" title="3. 取得系統管理員密碼"></a>3. 取得系統管理員密碼</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get secret CLUSTER-NAME-ssh-password -o jsonpath=&#x27;&#123;.data.ssh-passwordkey&#125;&#x27;) | base64 -d; echo</span><br></pre></td></tr></table></figure><p>把這個密碼存起來就好囉！</p><h3 id="4-ssh-登入"><a href="#4-ssh-登入" class="headerlink" title="4. ssh 登入"></a>4. ssh 登入</h3><p>ip 的話我都是直接從vCenter 介面上看是多少：<br><img src="https://i.imgur.com/Z6ioXQS.png"></p><p>接著用<code>vmware-system-user</code> 來 ssh 進去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh vmware-system-user@172.18.31.29</span><br></pre></td></tr></table></figure><p>Password 就貼上 step 3 密碼</p><hr><h3 id="demo"><a href="#demo" class="headerlink" title="/ demo /"></a>/ demo /</h3><p>我的 CLUSTER-NAME=tkc-1</p><p><img src="https://i.imgur.com/uyob9gA.png"></p><p>順利進去啦～</p><p>至於你問我在這安裝防毒軟體？沒有人在 CRX 上裝的啦，就像 Data Center node 重點是上 patch 保持防護力，防毒是裝在 VM 裡頭。在 container 的世界對那些 image 去掃才是正解，請搜尋 ClamAV 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;先來點開胃菜，名詞解釋：&quot;&gt;&lt;a href=&quot;#先來點開胃菜，名詞解釋：&quot; class=&quot;headerlink&quot; title=&quot;先來點開胃菜，名詞解釋：&quot;&gt;&lt;/a&gt;先來點開胃菜，名詞解釋：&lt;/h4&gt;&lt;blockquote&gt;
&lt;h5 id=&quot;vSphere-with</summary>
      
    
    
    
    <category term="work hack" scheme="https://sapphirelin.github.io/categories/work-hack/"/>
    
    <category term="那根樹枝 Tanzu" scheme="https://sapphirelin.github.io/categories/work-hack/%E9%82%A3%E6%A0%B9%E6%A8%B9%E6%9E%9D-Tanzu/"/>
    
    
    <category term="VMware" scheme="https://sapphirelin.github.io/tags/VMware/"/>
    
    <category term="Tanzu" scheme="https://sapphirelin.github.io/tags/Tanzu/"/>
    
    <category term="work hack" scheme="https://sapphirelin.github.io/tags/work-hack/"/>
    
    <category term="ssh" scheme="https://sapphirelin.github.io/tags/ssh/"/>
    
    <category term="password" scheme="https://sapphirelin.github.io/tags/password/"/>
    
  </entry>
  
  <entry>
    <title>VMware SSO Solutions: 實作客製化單一登入 VDI</title>
    <link href="https://sapphirelin.github.io/20210630-VMware-SSO-Solutions-%E5%AF%A6%E4%BD%9C%E5%AE%A2%E8%A3%BD%E5%8C%96%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5-VDI/"/>
    <id>https://sapphirelin.github.io/20210630-VMware-SSO-Solutions-%E5%AF%A6%E4%BD%9C%E5%AE%A2%E8%A3%BD%E5%8C%96%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5-VDI/</id>
    <published>2021-06-29T16:00:00.000Z</published>
    <updated>2021-07-18T11:10:30.379Z</updated>
    
    <content type="html"><![CDATA[<p>隨著重視資安的趨勢，越來越多客戶接受使用 VMware 的 VDI 及 UEM 解決方案。這時候整合企業原先既有的登入方式（或習慣）就能讓企業員工有更好的使用體驗，IT管理人員也能減少被問問題的麻煩，專心投入生產力目標，串接一次，適用一生。</p><p>加上現在使用的軟體跟系統真的是越來越多，密碼可能有上百組，如果能夠只用一個方式、一組帳號密碼，又安全又簡單的登入，對個人、對企業絕對大歡迎。所以除了大規模應用的OTP簡訊認證，現在也開始流行 Passwordless 的2FA、MFA、Biometric、FIDO 等等的 Single-Sign-on 解決方式。</p><p>而現在最常運用到 SSO 身份識別跟授權的傳輸協定就是—— SAML ！<br>SAML 是基於 xml 的開源標準來進行身份驗證跟授權的傳輸協定，有三種角色：</p><ol><li>idp: 身份驗證商 Identity Provider</li><li>principal: 也就是我們的使用者 User</li><li>sp: 服務提供商 Service Provider</li></ol><p>簡單來說就是 idp &amp; sp 會透過透過 SAML 格式來交換包含憑證的參數，互相認識對方，也認定對方，User 就能享受到 SSO 好處。上述提到的各種 MFA, FIDO 國際協定也經常運用 SAML ，VMware 現在產品與產品間的身份認證，也都是用 SAML 來進行傳輸。而 EUC 系列產品 Horizon(VDI) 與 Workspace ONE 等，也都允許自行利用 SAML 串接，並且可以同時擔綱 idp 或 sp 的角色。</p><p>最近遇到很多客戶狀況是，他們可能原本就有既有的身份認證系統（像是Okta, Azure MFA, ISV’s OTP），想直接用在單一登入VMware 終端設備場景，例如直接登入後給我指定虛擬桌面、或是登入後允許我進受到VPN 控管的 Tunnel apps等。</p><p>本文將依上述情境應用 SAML ，實作 SSO 串接：</p><hr><h2 id="環境準備"><a href="#環境準備" class="headerlink" title="/ 環境準備 /"></a>/ 環境準備 /</h2><p>僅需兩樣：</p><ol><li>一台 WS1 Access 跟 administrator 帳號 (SaaS/On-prem都行)</li><li>一個有 Java 1.6+ 跟 Maven 環境 </li></ol><p>VMware 用於客製化 SSO 解決方案的元件為 Workspace ONE Access (WS1 Access)，前身叫做vIDM (VMware Identity Manager)。此元件在許多產品都有附贈，遇過很多情況都只是當初導入時沒有順便裝起來而已。安裝資源的要求也超級輕，詳細可參考： <a href="https://docs.vmware.com/tw/VMware-Workspace-ONE-Access/20.10/workspace_one_access_install/GUID-E81B6B1B-A3D1-40D0-806A-3D31502C53A5.html">官方文件</a><br>在這個例子下 WS1 Access 的角色是 sp。</p><p>簡易的範例程式碼是以 java 寫的，大家可以去 <a href="https://github.com/vmware/vidm-saml-toolkit/tree/master/Sample_AuthServer">這邊</a> 拿來玩。</p><p>紀錄一下這次的環境： openjdk 11.0.11 / Apache Maven 3.6.0</p><h2 id="設定-Workspace-ONE-Access"><a href="#設定-Workspace-ONE-Access" class="headerlink" title="/ 設定 Workspace ONE Access /"></a>/ 設定 Workspace ONE Access /</h2><h3 id="Step-1：進入後台"><a href="#Step-1：進入後台" class="headerlink" title="Step 1：進入後台"></a>Step 1：進入後台</h3><p>首先就是登入到 WS1 Access 的管理後台，照順序選 “Identity Manager” –&gt; “Identity Providers” –&gt; “Add Identity Provider” –&gt; “Create Third Party IDP”.<br><img src="https://i.imgur.com/EX8lYFY.png" alt="Pic 1: VMware workspace one sso"><br>（這邊是 20.10 版本的畫面，不同版本只會有按鈕的些許差異而已，功能都有的）</p><h3 id="Step-2：新增IdP"><a href="#Step-2：新增IdP" class="headerlink" title="Step 2：新增IdP"></a>Step 2：新增IdP</h3><h4 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h4><p>先幫這個idp 取名字，如果你串第三方產品就可以寫那個產品的名稱：<br><img src="https://i.imgur.com/Wp35bqL.png"></p><h4 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h4><p>貼上idp 都提供進行交換的SAML metadata，第三方產品都會寫好相關的xml，自行開發的可以參考下範例程式碼，放在 webapp 資料夾下的 idp.xml：<br><img src="https://i.imgur.com/1uogCtF.png"></p><h4 id="2-3"><a href="#2-3" class="headerlink" title="2-3"></a>2-3</h4><p>全部貼上去後按下”Process IdP Metadata”，下面就會直接帶出對應的參數了，簡單方便。這次的登入介面簡單的利用WS1 Access 內建的userName / Password 來用，下面都先不調整。<br><img src="https://i.imgur.com/DOhimWU.png"></p><h4 id="2-4"><a href="#2-4" class="headerlink" title="2-4"></a>2-4</h4><p>針對要授權使用這個IdP的網路，我環境只有ALL，勾起來。<br>下面的話命名Auth Methods 為myAuth，憑證部分此code 使用的是X509，選起來按新增。<br><img src="https://i.imgur.com/WSXnmBl.png"></p><h4 id="2-5"><a href="#2-5" class="headerlink" title="2-5"></a>2-5</h4><p>這頁的最後一步，這邊就是 WS1 產出的 SP Metadata ，用來給 idp 進行交換，拿到這個 xml 的連結後，按”Add” 完成建立IdP。<br><img src="https://i.imgur.com/HTrzAHY.png"></p><h3 id="Step-3：設定-Policiy"><a href="#Step-3：設定-Policiy" class="headerlink" title="Step 3：設定 Policiy"></a>Step 3：設定 Policiy</h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3-1"></a>3-1</h4><p>換到 “Identity Manager” –&gt;  “Policies” –&gt; “Edit Default Policy”<br>我的環境比較簡單，實際應用的話就選擇需要利用額外IdP登入的那則 Policy 就好。<br><img src="https://i.imgur.com/tGxpeAP.png"></p><blockquote><p>這邊可以看到 WS1 Access 最強功能–以 policy based 來去規範說用什麼認證方式才能登入到什麼樣的網段、使用什麼樣的應用程式，例如一般利用瀏覽器走FIDO啦、Win 10 的話要插 smart card啦、不允許使用 Android 設備登入啦，或是限制在上班時間8小時或是可以一個禮拜居家辦公後才 expired等等，對資安嚴謹的公司來說只要在這個 portal 上面設定規則，就能依照業務上的使用情境來去做登入的控管。串接登入習觀資料到Intelligence 的AI上面，依照既有習慣偵測不安全登入行為，也是靠著這些rule 來拒絕，保持萬無一失的登入的。</p></blockquote><h4 id="3-2"><a href="#3-2" class="headerlink" title="3-2"></a>3-2</h4><p>接著選擇 “Configuration”  –&gt; “ADD POLICY RULE”<br><img src="https://i.imgur.com/NTkmY4Z.png"></p><h4 id="3-3"><a href="#3-3" class="headerlink" title="3-3"></a>3-3</h4><p>如果是既有規則基本上 range &amp; device type 不用動，這邊允許全部，注意最下面的認證方式要選我們2-4新增的驗證規則，接著按”SAVE”<br><img src="https://i.imgur.com/DGalLiy.png"></p><h4 id="3-4"><a href="#3-4" class="headerlink" title="3-4"></a>3-4</h4><p>回到Configuration後，注意把我們新的驗證模式拉到最前面，讓他的變成第一個驗證的權重，設定就完成囉！串完啦～ ｡:.ﾟヽ(*´∀`)ﾉﾟ.:｡<br><img src="https://i.imgur.com/4SgaWYy.png"></p><h2 id="demo"><a href="#demo" class="headerlink" title="/ demo /"></a>/ demo /</h2><p>歡迎直接參考我的懶人指令包完成展示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/vmware/vidm-saml-toolkit.git</span><br><span class="line">$ cd vidm-saml-toolkit</span><br><span class="line">$ mvn clean install</span><br><span class="line">$ cd Sample_AuthServer</span><br><span class="line">$ mvn compile exec:java</span><br></pre></td></tr></table></figure><p>原本的登入方式就是WS1的介面：<br><img src="https://i.imgur.com/oFokNUE.png"></p><p>現在就可以客製成你想要的登入模樣啦！<br><img src="https://i.imgur.com/RqOofGK.png"></p><hr><p>以上就是本次的分享  (<em>ˇωˇ</em>人)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;隨著重視資安的趨勢，越來越多客戶接受使用 VMware 的 VDI 及 UEM 解決方案。這時候整合企業原先既有的登入方式（或習慣）就能讓企業員工有更好的使用體驗，IT管理人員也能減少被問問題的麻煩，專心投入生產力目標，串接一次，適用一生。&lt;/p&gt;
&lt;p&gt;加上現在使用的軟體</summary>
      
    
    
    
    <category term="work hack" scheme="https://sapphirelin.github.io/categories/work-hack/"/>
    
    <category term="SSO 單一登入" scheme="https://sapphirelin.github.io/categories/work-hack/SSO-%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5/"/>
    
    
    <category term="VMware" scheme="https://sapphirelin.github.io/tags/VMware/"/>
    
    <category term="Workspace ONE" scheme="https://sapphirelin.github.io/tags/Workspace-ONE/"/>
    
    <category term="EUC" scheme="https://sapphirelin.github.io/tags/EUC/"/>
    
    <category term="VDI" scheme="https://sapphirelin.github.io/tags/VDI/"/>
    
    <category term="SSO" scheme="https://sapphirelin.github.io/tags/SSO/"/>
    
    <category term="UEM" scheme="https://sapphirelin.github.io/tags/UEM/"/>
    
  </entry>
  
</feed>
